<!--header begins-->
<%- include("../../views/partials/user/header") %>
<!--header ends-->
<div class="breadcrumbs">
  <div class="container_12">
      <div class="grid_12">
          <a href="/">Home</a><span></span><span class="current">Cart</span>
      </div>
  </div>
</div>
<section id="main">
    <div class="container_12">
      <div id="content" class="grid_12">
        <header>
          <h1 class="page_title">Shopping cart</h1>
        </header>
        <article>
          <div id="cart-container">
          <table class="cart_product">
            <tr class="bg">
              <th class="images"></th>
              <th class="name">Product Name</th>
              <th class="price">Unit Price</th>
              <th class="discount">Discount</th>
              <th class="qty">Qty</th>
              <th class="subtotal">Subtotal</th>
              <th class="close"> </th>
            </tr>
            <% if (cart) { %>
              <% cart.forEach(function(item) { %>
                <tr data-product-id="<%= item.product._id %>">
                  <td class="images">
                    <a href="/product_page/<%= item.product._id %>">
                      <img src="/uploads/products/<%= item.product.images[0] %>" alt="<%= item.product.name %>" title="">
                    </a>
                  </td>
                  <td class="name"><%= item.product.name %></td>
                  <td class="price">₹<%= item.product.price %></td>
                  <td class="discount"><%= item.product.discount %> %</td>
                  <td class="qty">
                    <span style="margin-bottom: 5px;"><%= item.quantity %></span>
                    <div style="text-align: center;">
                      <button class="qty-btn minus" data-product-id="<%= item.product._id %>" style="display: inline-block; margin: 0 auto; padding: 0 5px; height: 20px; line-height: 20px;">-</button>
                      <button class="qty-btn plus" data-product-id="<%= item.product._id %>" style="display: inline-block; margin: 0 auto; padding: 0 5px; height: 20px; line-height: 20px;">+</button>
                    </div>
                  </td>
                  <td class="subtotal">
                    ₹<%= ((item.product.price - (item.product.price * item.product.discount / 100)) * item.quantity).toFixed(2) %>
                  </td>
                  <td class="close">
                    <button class="close" data-product-id="<%= item.product._id %>" style="opacity: 1;"  >X</button>
                </td>
                </tr>
              <% }); %>
            <% } else { %>
              <tr>
                <td colspan="7">Your cart is empty.</td>
              </tr>
            <% } %>
            <tr>
              <td colspan="7" class="cart_but">
                  <a href="/products" class="continue"><img src="img/cont.png" alt="" title=""> Continue Shopping</a>
                 
              </td>
          </tr>
          </table>
        </div>
          <div id="cart_forms" class="negative-grid">
            <div class="grid_4">
              <div class="bottom_block discount">
                <h3>Discount Codes</h3>
                <p>Enter your coupon code if you have one.</p>
                <form>
                  <p><input type="text" name="" value=""></p>
                  <input type="submit" id="apply_coupon" value="Apply Coupon">
                </form>
              </div><!-- .discount -->
            </div><!-- .grid_4 -->
            <div class="grid_4">
              <div class="bottom_block total">
                <table class="subtotal">
                  <tr>
                    <td>Subtotal</td><td class="price">₹<%= totalPrice %></td>
                  </tr>
                  <tr class="grand_total">
                    <td>Grand Total</td><td class="price">₹<%= totalPrice %></td>
                  </tr>
                </table>
                <form action="/checkout" method="POST">
                  <button type="submit" class="checkout">PROCEED TO ORDER <img src="/img/checkout.png" alt="" title=""></button>
                </form>
                
                
              </div><!-- .total -->
            </div><!-- .grid_4 -->
            <div class="clear"></div>
          </div><!-- #cart_forms -->
          <div class="clear"></div>
        </article>
      </div><!-- #content -->
      <div class="clear"></div>
    </div><!-- .container_12 -->
  </section><!-- #main -->
  <script src="https://cdn.jsdelivr.net/npm/sweetalert2@10"></script>
  <script>
const plusButtons = document.querySelectorAll('.plus');
const minusButtons = document.querySelectorAll('.minus');

plusButtons.forEach(button => {
  button.addEventListener('click', function() {
    const productId = this.getAttribute('data-product-id');
    const quantityElement = document.querySelector(`tr[data-product-id="${productId}"] .qty span`);
    const previousQuantity = parseInt(quantityElement.textContent);
    const quantity = previousQuantity + 1;
    quantityElement.textContent = quantity;
    updateQuantity(productId, quantity, previousQuantity);
  });
});

minusButtons.forEach(button => {
  button.addEventListener('click', function() {
    const productId = this.getAttribute('data-product-id');
    const quantityElement = document.querySelector(`tr[data-product-id="${productId}"] .qty span`);
    const previousQuantity = parseInt(quantityElement.textContent);
    const quantity = previousQuantity - 1;
    if (quantity < 1) {
      quantity = 1;
    }
    quantityElement.textContent = quantity;
    updateQuantity(productId, quantity, previousQuantity);
  });
});

function updateQuantity(productId, quantity, previousQuantity) {
  fetch('/cart/update', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ productId, quantity }),
  })
  .then(response => response.json())
  .then(data => {
    if (data.success) {
      Swal.fire({
        icon: 'success',
        title: 'Cart updated successfully',
        text: 'Your cart has been updated successfully.',
        timer: 2000,
        showConfirmButton: false
      });
      // Update the subtotal and total price on the page
      updateCartTotals(data.cart);
    } else {
      Swal.fire({
        icon: 'error',
        title: 'Failed to update cart',
        text: data.error || 'Failed to update cart',
        timer: 2000,
        showConfirmButton: false
      });
      // Revert the quantity change
      const quantityElement = document.querySelector(`tr[data-product-id="${productId}"] .qty span`);
      quantityElement.textContent = previousQuantity;
    }
  })
  .catch(error => console.error('Error updating cart:', error));
}

function updateCartTotals(cart) {
  console.log('Updating cart totals with:', JSON.stringify(cart, null, 2));

  const subtotalElement = document.querySelector('.subtotal .price');
  const grandTotalElement = document.querySelector('.grand_total .price');

  // If cart is empty, set subtotal and grand total to zero
  if (!cart || cart.length === 0) {
    console.log('Cart is empty, setting totals to zero');
    subtotalElement.textContent = `₹0.00`;
    grandTotalElement.textContent = `₹0.00`;
    return;
  }

  // Calculate subtotal and grand total with proper checks
  const total = cart.reduce((sum, item) => {
    console.log('Processing item:', JSON.stringify(item, null, 2));
    
    const price = parseFloat(item.price) || 0;
    const discount = parseFloat(item.discount) || 0;
    const quantity = parseInt(item.quantity) || 1;
    
    const itemTotal = (price - (price * discount / 100)) * quantity;
    
    console.log(`Item: ${item.product}, Price: ${price}, Discount: ${discount}, Quantity: ${quantity}, Total: ${itemTotal}`);
    
    return sum + itemTotal;
  }, 0);

  console.log('Calculated total:', total);

  // Update subtotal and grand total elements
  subtotalElement.textContent = `₹${total.toFixed(2)}`;
  grandTotalElement.textContent = `₹${total.toFixed(2)}`;

  // Update individual item subtotals
  cart.forEach(item => {
    const itemSubtotalElement = document.querySelector(`tr[data-product-id="${item.product}"] .subtotal`);
    if (itemSubtotalElement) {
      const price = parseFloat(item.price) || 0;
      const discount = parseFloat(item.discount) || 0;
      const quantity = parseInt(item.quantity) || 1;
      const itemSubtotal = (price - (price * discount / 100)) * quantity;

      itemSubtotalElement.textContent = `₹${itemSubtotal.toFixed(2)}`;
    }
  });
}
/* remove product */
const removeButtons = document.querySelectorAll('.close');

document.addEventListener('click', function(event) {
    if (event.target.matches('.close')) {
        const productId = event.target.getAttribute('data-product-id');
        console.log('Product ID from button:', productId); // Check the ID

        // Proceed only if productId is valid
        if (productId) {
            Swal.fire({
                title: 'Are you sure?',
                text: "You won't be able to revert this!",
                icon: 'warning',
                showCancelButton: true,
                confirmButtonColor: '#3085d6',
                cancelButtonColor: '#d33',
                confirmButtonText: 'Yes, remove it!'
            }).then((result) => {
                if (result.isConfirmed) {
                    removeFromCart(productId);
                }
            });
        } else {
            console.error('No product ID found for this button.'); 
        }
    }
});

function removeFromCart(productId) {
  console.log('Removing product with ID:', productId); 

  fetch('/cart/remove', {
    method: 'POST',
    headers: {
      'Content-Type': 'application/json',
    },
    body: JSON.stringify({ productId }),
  })
  .then(response => response.json())
  .then(data => {
    console.log('Server response:', JSON.stringify(data, null, 2));
    if (data.success) {
      Swal.fire({
        icon: 'success',
        title: 'Removed!',
        text: 'The product has been removed from your cart.',
        timer: 2000,
        showConfirmButton: false
      });
      
      const productRow = document.querySelector(`tr[data-product-id="${productId}"]`);
      if (productRow) {
        productRow.remove();
      }
      
      // Check if data.cart exists and is not empty
      if (data.cart && Array.isArray(data.cart) && data.cart.length > 0) {
        console.log('Updated cart:', JSON.stringify(data.cart, null, 2));
        updateCartTotals(data.cart);
      } else {
        console.error('Cart is empty or invalid after removal');
        // Handle empty cart scenario
        updateCartTotals([]);
      }
    } else {
      Swal.fire({
        icon: 'error',
        title: 'Error!',
        text: data.error || 'Failed to remove product',
        timer: 2000,
        showConfirmButton: false
      });
    }
  })
  .catch(error => console.error('Error removing product:', error));
}
/* remove product */
    </script>

     <!--footer begins-->
     <%- include("../../views/partials/user/footer")%>