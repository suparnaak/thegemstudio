<%- include("../partials/admin/header") %>
<div class="container-fluid">
    <div class="row">
        <div class="col-lg-10 col-md-9 ml-sm-auto p-4">
            <h1>Order Details</h1>
            <div class="card mb-4">
                <div class="card-body">
                    <h5 class="card-title">Order ID: <%= order.orderId %></h5>
                    <p class="card-text">Customer: <%= order.userId.name %> (<%= order.userId.email %>)</p>
                    <p class="card-text">Order Date: <%= order.orderDate.toLocaleDateString() %></p>
                    <p class="card-text">Payment Method: <%= order.paymentMethod %></p>
                    <div class="payment-status">
                        <p class="card-text">Payment Status: <span class="status"><%= order.paymentStatus %></span></p>
                    </div><br>
                    <p class="card-text">Grand Total: ₹<%= order.grandTotal.toFixed(2) %></p>
                </div>
            </div>

            <h2>Products</h2>
            <table class="table">
                <thead>
                    <tr>
                        <th>Product</th>
                        <th>Price</th>
                        <th>Quantity</th>
                        <th>Subtotal</th>
                        <th>Delivery Status</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% order.items.forEach((item, index) => { %>
                        <tr>
                            <td><%= item.productId.name %></td>
                            <td>₹<%= item.price.toFixed(2) %></td>
                            <td><%= item.quantity %></td>
                            <td>₹<%= item.subtotal.toFixed(2) %></td>
                            <td><%= item.deliveryStatus %></td>
                            <td>
                                <% const getNextStatus = (currentStatus) => {
                                    const statusFlow = {
                                        'Pending': 'Shipped',
                                        'Shipped': 'On Transit',
                                        'On Transit': 'Out for Delivery',
                                        'Out for Delivery': 'Delivered'
                                    };
                                    return statusFlow[currentStatus];
                                } %>
                                
                                <% if (item.deliveryStatus === 'Pending') { %>
                                    <button class="btn btn-success btn-sm changeStatus" 
                                            data-product-id="<%= item.productId._id %>" 
                                            data-status="Shipped">
                                        Mark as Shipped
                                    </button>
                                    <button class="btn btn-danger btn-sm changeStatus" 
                                            data-product-id="<%= item.productId._id %>" 
                                            data-status="Admin Cancelled">
                                        Cancel Order
                                    </button>
                                <% } else if (['Shipped', 'On Transit', 'Out for Delivery'].includes(item.deliveryStatus)) { %>
                                    <button class="btn btn-success btn-sm changeStatus" 
                                            data-product-id="<%= item.productId._id %>" 
                                            data-status="<%= getNextStatus(item.deliveryStatus) %>">
                                        Mark as <%= getNextStatus(item.deliveryStatus) %>
                                    </button>
                                <% } else if (item.deliveryStatus === 'Return Pending') { %>
                                    <button class="btn btn-warning btn-sm changeStatus" 
                                            data-product-id="<%= item.productId._id %>" 
                                            data-status="Returned">
                                        Mark as Returned
                                    </button>
                                <% } %>
                            </td>
                        </tr>
                    <% }); %>
                </tbody>
            </table>

            <h2>Delivery Address</h2>
            <p>
                <%= order.address.name %>, <%= order.address.houseName %>, <%= order.address.street %>, 
                <%= order.address.city %>, <%= order.address.country %> - <%= order.address.zipcode %><br>
                Mobile: <%= order.address.mobile %>
            </p>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
document.addEventListener('DOMContentLoaded', function() {
    // Delivery status update
    document.querySelectorAll('.changeStatus').forEach(button => {
        button.addEventListener('click', function() {
            const newStatus = this.getAttribute('data-status');
            const productId = this.getAttribute('data-product-id');

            let confirmationMessage = `You are about to change the delivery status to ${newStatus}.`;
            if (newStatus === 'Admin Cancelled') {
                confirmationMessage = 'You are about to cancel this order. This action cannot be undone.';
            } else if (newStatus === 'Returned') {
                confirmationMessage = 'You are about to mark this item as returned. This action cannot be undone.';
            }

            Swal.fire({
                title: 'Are you sure?',
                text: confirmationMessage,
                icon: 'warning',
                showCancelButton: true,
                confirmButtonText: 'Yes, update status',
                cancelButtonText: 'No, cancel',
            }).then((result) => {
                if (result.isConfirmed) {
                    const data = {
                        orderId: '<%= order._id %>',
                        productId: productId,
                        newStatus: newStatus,
                    };

                    updateStatus(data);
                }
            });
        });
    });
});

function updateStatus(data) {
    fetch('/admin/update-order-status', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify(data),
    })
    .then(response => response.json())
    .then(data => {
        if (data.refunded) {
            Swal.fire({
                icon: 'success',
                title: 'Status Updated',
                html: `${data.message}<br>Refunded amount: ₹${data.amount.toFixed(2)}`,
            }).then(() => {
                location.reload();
            });
        } else if (data.message === "Payment not made, cannot update delivery status") {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Payment not made, cannot update delivery status',
            });
        } else {
            Swal.fire('Updated!', data.message, 'success').then(() => {
                location.reload();
            });
        }
    })
    .catch((error) => {
        console.error('Error:', error);
        Swal.fire('Error!', 'An error occurred while updating the status.', 'error');
    });
}
</script>
<%- include("../partials/admin/footer") %>
