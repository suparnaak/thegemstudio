<%- include("../../views/partials/admin/header") %>
  <div class="container-fluid">
    <div class="row">
      <div class="col-lg-10 col-md-9 ml-sm-auto p-4">
        <h1>Edit Category</h1>
        <form id="edit-category-form" method="PATCH" novalidate>
          <div class="form-group">
            <label for="name">Category Name</label>
            <input type="text" class="form-control" id="name" name="name" value="<%= category.name %>" />
            <small class="text-danger" id="name-error"></small>
          </div>
          <div class="form-group">
            <label for="description">Description</label>
            <textarea class="form-control" id="description" name="description" rows="3"><%= category.description %></textarea>
            <small class="text-danger" id="description-error"></small>
          </div>
          <div class="form-group">
            <label for="offer">Offer (%)</label>
            <input type="number" class="form-control" id="offer" name="offer" value="<%= category.offer %>" min="0" max="90" />
            <small class="text-danger" id="offer-error"></small>
          </div>
          <button type="submit" class="btn btn-success">Save Changes</button>
          <div class="error-message text-danger mt-2"></div>
        </form>
      </div>
    </div>
  </div>
  <script>
    const categoryId = "<%= category._id %>";
    const form = document.querySelector("form");
    const nameInput = document.querySelector("#name");
    const descriptionInput = document.querySelector("#description");
    const offerInput = document.querySelector("#offer");
    const nameError = document.querySelector("#name-error");
    const descriptionError = document.querySelector("#description-error");
    const offerError = document.querySelector("#offer-error");
    const errorMessage = document.querySelector(".error-message");

    const isEmptyOrSpaces = (str) => {
      return !str || str.trim().length === 0;
    };

    const containsOnlySpaces = (str) => {
      return str && str.trim().length === 0;
    };

    // name
    const validateName = () => {
      const value = nameInput.value;
      if (isEmptyOrSpaces(value)) {
        nameError.textContent = "Category name is required.";
        nameInput.classList.add("is-invalid");
        return false;
      }
      if (containsOnlySpaces(value)) {
        nameError.textContent = "Category name cannot contain only spaces.";
        nameInput.classList.add("is-invalid");
        return false;
      }
      nameError.textContent = "";
      nameInput.classList.remove("is-invalid");
      return true;
    };

    // description
    const validateDescription = () => {
      const value = descriptionInput.value;
      if (isEmptyOrSpaces(value)) {
        descriptionError.textContent = "Description is required.";
        descriptionInput.classList.add("is-invalid");
        return false;
      }
      if (containsOnlySpaces(value)) {
        descriptionError.textContent = "Description cannot contain only spaces.";
        descriptionInput.classList.add("is-invalid");
        return false;
      }
      descriptionError.textContent = "";
      descriptionInput.classList.remove("is-invalid");
      return true;
    };

    // offer
    const validateOffer = () => {
      const value = offerInput.value;
      if (isEmptyOrSpaces(value)) {
        offerError.textContent = "Offer percentage is required.";
        offerInput.classList.add("is-invalid");
        return false;
      }
      const offerNum = parseFloat(value);
      if (isNaN(offerNum) || offerNum < 0 || offerNum > 90) {
        offerError.textContent = "Offer must be between 0 and 90 percent.";
        offerInput.classList.add("is-invalid");
        return false;
      }
      offerError.textContent = "";
      offerInput.classList.remove("is-invalid");
      return true;
    };

   
    nameInput.addEventListener("blur", validateName);
    descriptionInput.addEventListener("blur", validateDescription);
    offerInput.addEventListener("blur", validateOffer);

   
    nameInput.addEventListener("input", () => {
      if (nameInput.value.trim().length > 0) {
        nameError.textContent = "";
        nameInput.classList.remove("is-invalid");
      }
    });

    descriptionInput.addEventListener("input", () => {
      if (descriptionInput.value.trim().length > 0) {
        descriptionError.textContent = "";
        descriptionInput.classList.remove("is-invalid");
      }
    });

    offerInput.addEventListener("input", () => {
      if (offerInput.value.trim().length > 0) {
        offerError.textContent = "";
        offerInput.classList.remove("is-invalid");
      }
    });

  
    form.addEventListener("submit", async (e) => {
      e.preventDefault();
      errorMessage.innerHTML = "";

      
      const isNameValid = validateName();
      const isDescriptionValid = validateDescription();
      const isOfferValid = validateOffer();

     
      if (!isNameValid || !isDescriptionValid || !isOfferValid) {
        return;
      }

      const name = nameInput.value.trim();
      const description = descriptionInput.value.trim();
      const offer = offerInput.value.trim();

      try {
        const response = await fetch(`/admin/categories/edit/${categoryId}`, {
          method: "PATCH",
          headers: { "Content-Type": "application/json" },
          body: JSON.stringify({ name, description, offer }),
        });
        const data = await response.json();
        if (data.error) {
          errorMessage.innerHTML = data.error;
        } else if (data.success) {
          window.location.href = "/admin/categories";
        }
      } catch (error) {
        console.log("Error updating category:", error);
        errorMessage.innerHTML = "An error occurred while updating the category.";
      }
    });
  </script>
  <%- include("../../views/partials/admin/footer") %>