<%- include("../../views/partials/admin/header") %>

<div class="container-fluid">
  <div class="row">
    <div class="col-lg-10 col-md-9 ml-sm-auto p-4">
      <h1>Edit Brand</h1>
      <form id="editBrandForm" action="/admin/brands/edit/<%= brand._id %>" method="PATCH" novalidate>
        <div class="form-group">
          <label for="brandName">Brand Name</label>
          <input type="text" class="form-control" id="brandName" name="brandName" value="<%= brand.brandName %>" />
          <small class="text-danger" id="brandName-error"></small>
        </div>
        <div class="form-group">
          <label for="description">Description</label>
          <textarea class="form-control" id="description" name="description" rows="3"><%= brand.description %></textarea>
          <small class="text-danger" id="description-error"></small>
        </div>
        <button type="submit" class="btn btn-primary">Update Brand</button>
        <div class="error-message text-danger mt-2"></div>
      </form>
    </div>
  </div>
</div>

<script>
  const form = document.querySelector("#editBrandForm");
  const brandNameInput = document.querySelector("#brandName");
  const descriptionInput = document.querySelector("#description");
  const brandNameError = document.querySelector("#brandName-error");
  const descriptionError = document.querySelector("#description-error");
  const errorMessage = document.querySelector(".error-message");

  const isEmptyOrSpaces = (str) => {
    return !str || str.trim().length === 0;
  };

  const validateBrandName = () => {
    const value = brandNameInput.value;
    if (isEmptyOrSpaces(value)) {
      brandNameError.textContent = "Brand name is required.";
      brandNameInput.classList.add("is-invalid");
      return false;
    }
    brandNameError.textContent = "";
    brandNameInput.classList.remove("is-invalid");
    return true;
  };

  const validateDescription = () => {
    const value = descriptionInput.value;
    if (isEmptyOrSpaces(value)) {
      descriptionError.textContent = "Description is required.";
      descriptionInput.classList.add("is-invalid");
      return false;
    }
    descriptionError.textContent = "";
    descriptionInput.classList.remove("is-invalid");
    return true;
  };

  brandNameInput.addEventListener("blur", validateBrandName);
  descriptionInput.addEventListener("blur", validateDescription);

  brandNameInput.addEventListener("input", () => {
    if (brandNameInput.value.trim().length > 0) {
      brandNameError.textContent = "";
      brandNameInput.classList.remove("is-invalid");
    }
  });

  descriptionInput.addEventListener("input", () => {
    if (descriptionInput.value.trim().length > 0) {
      descriptionError.textContent = "";
      descriptionInput.classList.remove("is-invalid");
    }
  });

  form.addEventListener("submit", async (e) => {
    e.preventDefault();
    errorMessage.innerHTML = "";

    const isBrandNameValid = validateBrandName();
    const isDescriptionValid = validateDescription();

    if (!isBrandNameValid || !isDescriptionValid) {
      return;
    }

    const brandName = brandNameInput.value.trim();
    const description = descriptionInput.value.trim();

    try {
      const response = await fetch(`/admin/brands/edit/<%= brand._id %>`, {
        method: "PATCH",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ brandName, description }),
      });

      const data = await response.json();
      if (data.error) {
        errorMessage.innerHTML = data.error;
      } else {
        window.location.href = "/admin/brands";
      }
    } catch (error) {
      console.error(error);
      errorMessage.innerHTML = "An error occurred while updating the brand.";
    }
  });
</script>

<%- include("../../views/partials/admin/footer") %>